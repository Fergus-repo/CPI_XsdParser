namespace proholz.xsdparser;

type
  DefaultParserConfig = public class (ParserConfig)
    method getXsdTypesToCodeGen: Dictionary<String,String>;
    begin
      var xsdTypesToCodegen: Dictionary<String,String> := new Dictionary<String,String>();
      var lstring: String := 'String';
      var xmlGregorianCalendar: String := 'XMLGregorianCalendar';
      var duration: String := 'Duration';
      var bigInteger: String := 'BigInteger';
      var linteger: String := 'Integer';
      var shortString: String := 'Short';
      var qName: String := 'QName';
      var longString: String := 'Long';
      var byteString: String := 'Byte';
      xsdTypesToCodegen.Add('xsd:anyURI', lstring);
      xsdTypesToCodegen.Add('xs:anyURI', lstring);
      xsdTypesToCodegen.Add('xsd:boolean', 'Boolean');
      xsdTypesToCodegen.Add('xs:boolean', 'Boolean');
      xsdTypesToCodegen.Add('xsd:date', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xs:date', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xsd:dateTime', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xs:dateTime', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xsd:time', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xs:time', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xsd:duration', duration);
      xsdTypesToCodegen.Add('xs:duration', duration);
      xsdTypesToCodegen.Add('xsd:dayTimeDuration', duration);
      xsdTypesToCodegen.Add('xs:dayTimeDuration', duration);
      xsdTypesToCodegen.Add('xsd:yearMonthDuration', duration);
      xsdTypesToCodegen.Add('xs:yearMonthDuration', duration);
      xsdTypesToCodegen.Add('xsd:gDay', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xs:gDay', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xsd:gMonth', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xs:gMonth', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xsd:gMonthDay', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xs:gMonthDay', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xsd:gYear', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xs:gYear', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xsd:gYearMonth', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xs:gYearMonth', xmlGregorianCalendar);
      xsdTypesToCodegen.Add('xsd:decimal', 'BigDecimal');
      xsdTypesToCodegen.Add('xs:decimal', 'BigDecimal');
      xsdTypesToCodegen.Add('xsd:integer', bigInteger);
      xsdTypesToCodegen.Add('xs:integer', bigInteger);
      xsdTypesToCodegen.Add('xsd:nonPositiveInteger', bigInteger);
      xsdTypesToCodegen.Add('xs:nonPositiveInteger', bigInteger);
      xsdTypesToCodegen.Add('xsd:negativeInteger', bigInteger);
      xsdTypesToCodegen.Add('xs:negativeInteger', bigInteger);
      xsdTypesToCodegen.Add('xsd:long', longString);
      xsdTypesToCodegen.Add('xs:long', longString);
      xsdTypesToCodegen.Add('xsd:int', linteger);
      xsdTypesToCodegen.Add('xs:int', linteger);
      xsdTypesToCodegen.Add('xsd:short', shortString);
      xsdTypesToCodegen.Add('xs:short', shortString);
      xsdTypesToCodegen.Add('xsd:byte', byteString);
      xsdTypesToCodegen.Add('xs:byte', byteString);
      xsdTypesToCodegen.Add('xsd:nonNegativeInteger', bigInteger);
      xsdTypesToCodegen.Add('xs:nonNegativeInteger', bigInteger);
      xsdTypesToCodegen.Add('xsd:unsignedLong', bigInteger);
      xsdTypesToCodegen.Add('xs:unsignedLong', bigInteger);
      xsdTypesToCodegen.Add('xsd:unsignedInt', longString);
      xsdTypesToCodegen.Add('xs:unsignedInt', longString);
      xsdTypesToCodegen.Add('xsd:unsignedShort', linteger);
      xsdTypesToCodegen.Add('xs:unsignedShort', linteger);
      xsdTypesToCodegen.Add('xsd:unsignedByte', shortString);
      xsdTypesToCodegen.Add('xs:unsignedByte', shortString);
      xsdTypesToCodegen.Add('xsd:positiveInteger', bigInteger);
      xsdTypesToCodegen.Add('xs:positiveInteger', bigInteger);
      xsdTypesToCodegen.Add('xsd:double', 'Double');
      xsdTypesToCodegen.Add('xs:double', 'Double');
      xsdTypesToCodegen.Add('xsd:float', 'Float');
      xsdTypesToCodegen.Add('xs:float', 'Float');
      xsdTypesToCodegen.Add('xsd:QName', qName);
      xsdTypesToCodegen.Add('xs:QName', qName);
      xsdTypesToCodegen.Add('xsd:NOTATION', qName);
      xsdTypesToCodegen.Add('xs:NOTATION', qName);
      xsdTypesToCodegen.Add('xsd:string', lstring);
      xsdTypesToCodegen.Add('xs:string', lstring);
      xsdTypesToCodegen.Add('xsd:normalizedString', lstring);
      xsdTypesToCodegen.Add('xs:normalizedString', lstring);
      xsdTypesToCodegen.Add('xsd:token', lstring);
      xsdTypesToCodegen.Add('xs:token', lstring);
      xsdTypesToCodegen.Add('xsd:language', lstring);
      xsdTypesToCodegen.Add('xs:language', lstring);
      xsdTypesToCodegen.Add('xsd:NMTOKEN', lstring);
      xsdTypesToCodegen.Add('xs:NMTOKEN', lstring);
      xsdTypesToCodegen.Add('xsd:Name', lstring);
      xsdTypesToCodegen.Add('xs:Name', lstring);
      xsdTypesToCodegen.Add('xsd:NCName', lstring);
      xsdTypesToCodegen.Add('xs:NCName', lstring);
      xsdTypesToCodegen.Add('xsd:ID', lstring);
      xsdTypesToCodegen.Add('xs:ID', lstring);
      xsdTypesToCodegen.Add('xsd:IDREF', lstring);
      xsdTypesToCodegen.Add('xs:IDREF', lstring);
      xsdTypesToCodegen.Add('xsd:ENTITY', lstring);
      xsdTypesToCodegen.Add('xs:ENTITY', lstring);
      xsdTypesToCodegen.Add('xsd:untypedAtomic', lstring);
      xsdTypesToCodegen.Add('xs:untypedAtomic', lstring);
      exit xsdTypesToCodegen;
    end;

    method getParseMappers: ParseMappersDictionary;
    begin
      var parseMappers: ParseMappersDictionary := new ParseMappersDictionary();

      parseMappers.Add(XsdAll.XSD_TAG, @XsdAll.parse);
      parseMappers.Add(XsdAll.XS_TAG, @XsdAll.parse);
      parseMappers.Add(XsdAttribute.XSD_TAG, @XsdAttribute.parse);
      parseMappers.Add(XsdAttribute.XS_TAG, @XsdAttribute.parse);
      parseMappers.Add(XsdAttributeGroup.XSD_TAG, @XsdAttributeGroup.parse);
      parseMappers.Add(XsdAttributeGroup.XS_TAG, @XsdAttributeGroup.parse);
      parseMappers.Add(XsdChoice.XSD_TAG, @XsdChoice.parse);
      parseMappers.Add(XsdChoice.XS_TAG, @XsdChoice.parse);
      parseMappers.Add(XsdComplexType.XSD_TAG, @XsdComplexType.parse);
      parseMappers.Add(XsdComplexType.XS_TAG, @XsdComplexType.parse);
      parseMappers.Add(XsdElement.XSD_TAG, @XsdElement.parse);
      parseMappers.Add(XsdElement.XS_TAG, @XsdElement.parse);
      parseMappers.Add(XsdGroup.XSD_TAG, @XsdGroup.parse);
      parseMappers.Add(XsdGroup.XS_TAG, @XsdGroup.parse);
      parseMappers.Add(XsdInclude.XSD_TAG, @XsdInclude.parse);
      parseMappers.Add(XsdInclude.XS_TAG, @XsdInclude.parse);
      parseMappers.Add(XsdImport.XSD_TAG, @XsdImport.parse);
      parseMappers.Add(XsdImport.XS_TAG, @XsdImport.parse);
      parseMappers.Add(XsdSequence.XSD_TAG, @XsdSequence.parse);
      parseMappers.Add(XsdSequence.XS_TAG, @XsdSequence.parse);
      parseMappers.Add(XsdSimpleType.XSD_TAG, @XsdSimpleType.parse);
      parseMappers.Add(XsdSimpleType.XS_TAG, @XsdSimpleType.parse);
      parseMappers.Add(XsdList.XSD_TAG, @XsdList.parse);
      parseMappers.Add(XsdList.XS_TAG, @XsdList.parse);
      parseMappers.Add(XsdRestriction.XSD_TAG, @XsdRestriction.parse);
      parseMappers.Add(XsdRestriction.XS_TAG, @XsdRestriction.parse);
      parseMappers.Add(XsdUnion.XSD_TAG, @XsdUnion.parse);
      parseMappers.Add(XsdUnion.XS_TAG, @XsdUnion.parse);

      parseMappers.Add(XsdAnnotation.XSD_TAG, @XsdAnnotation.parse);
      parseMappers.Add(XsdAnnotation.XS_TAG, @XsdAnnotation.parse);
      parseMappers.Add(XsdAppInfo.XSD_TAG, @XsdAppInfo.parse);
      parseMappers.Add(XsdAppInfo.XS_TAG, @XsdAppInfo.parse);
      parseMappers.Add(XsdComplexContent.XSD_TAG, @XsdComplexContent.parse);
      parseMappers.Add(XsdComplexContent.XS_TAG, @XsdComplexContent.parse);
      parseMappers.Add(XsdDocumentation.XSD_TAG, @XsdDocumentation.parse);
      parseMappers.Add(XsdDocumentation.XS_TAG, @XsdDocumentation.parse);
      parseMappers.Add(XsdExtension.XSD_TAG, @XsdExtension.parse);
      parseMappers.Add(XsdExtension.XS_TAG, @XsdExtension.parse);
      parseMappers.Add(XsdSimpleContent.XSD_TAG, @XsdSimpleContent.parse);
      parseMappers.Add(XsdSimpleContent.XS_TAG, @XsdSimpleContent.parse);

      parseMappers.Add(XsdEnumeration.XSD_TAG, @XsdEnumeration.parse);
      parseMappers.Add(XsdEnumeration.XS_TAG, @XsdEnumeration.parse);
      parseMappers.Add(XsdFractionDigits.XSD_TAG, @XsdFractionDigits.parse);
      parseMappers.Add(XsdFractionDigits.XS_TAG, @XsdFractionDigits.parse);
      parseMappers.Add(XsdLength.XSD_TAG, @XsdLength.parse);
      parseMappers.Add(XsdLength.XS_TAG, @XsdLength.parse);
      parseMappers.Add(XsdMaxExclusive.XSD_TAG, @XsdMaxExclusive.parse);
      parseMappers.Add(XsdMaxExclusive.XS_TAG, @XsdMaxExclusive.parse);
      parseMappers.Add(XsdMaxInclusive.XSD_TAG, @XsdMaxInclusive.parse);
      parseMappers.Add(XsdMaxInclusive.XS_TAG, @XsdMaxInclusive.parse);
      parseMappers.Add(XsdMaxLength.XSD_TAG, @XsdMaxLength.parse);
      parseMappers.Add(XsdMaxLength.XS_TAG, @XsdMaxLength.parse);
      parseMappers.Add(XsdMinExclusive.XSD_TAG, @XsdMinExclusive.parse);
      parseMappers.Add(XsdMinExclusive.XS_TAG, @XsdMinExclusive.parse);
      parseMappers.Add(XsdMinInclusive.XSD_TAG, @XsdMinInclusive.parse);
      parseMappers.Add(XsdMinInclusive.XS_TAG, @XsdMinInclusive.parse);
      parseMappers.Add(XsdMinLength.XSD_TAG, @XsdMinLength.parse);
      parseMappers.Add(XsdMinLength.XS_TAG, @XsdMinLength.parse);
      parseMappers.Add(XsdPattern.XSD_TAG, @XsdPattern.parse);
      parseMappers.Add(XsdPattern.XS_TAG, @XsdPattern.parse);
      parseMappers.Add(XsdTotalDigits.XSD_TAG, @XsdTotalDigits.parse);
      parseMappers.Add(XsdTotalDigits.XS_TAG, @XsdTotalDigits.parse);
      parseMappers.Add(XsdWhiteSpace.XSD_TAG, @XsdWhiteSpace.parse);
      parseMappers.Add(XsdWhiteSpace.XS_TAG, @XsdWhiteSpace.parse);

      exit parseMappers;
    end;



  end;



end.